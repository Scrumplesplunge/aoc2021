// Input: an ASCII-art hallway with four rooms. Each room contains two letters.
// Each letter represents a type of Amphipod, and moving an Amphipod has a cost
// that depends on its type: A costs 1 per step, B costs 10, C costs 100, and
// D costs 1000. The goal is to organise Amphipods such that the first room
// holds those of type A, the second holds those of type B, and so on.
// Furthermore, Amphipods have particular rules about how they move:
//
//   * An Amphipod will never enter a room except for their target room, but it
//     can stay in its starting room until it chooses to leave regardless of
//     whether that room is the target room.
//   * An Amphipod will not move around in the hallway: it will either move
//     straight from one room to another via the hallway, or will stand still in
//     the hallway until it is able to move into another room.
//   * An Amphipod will never stop directly outside the entrance to a room.
//
// Part 1: Find the minimum cost for reorganising the Amphipods into
// alphabetical order in the rooms.
//
// Part 2: The hallway rooms are actually four spaces high rather than two, and
// there are eight more Amphipods with the following arrangement:
//
//     #############
//     #...........#
//     ###?#?#?#?###
//   +   #D#C#B#A#
//   +   #D#B#A#C#
//       #?#?#?#?#
//       #########
//
// Find the new minimum cost for reorganising the Amphipods.
//
// Approach: The optimal sequence of moves for rearranging the Amphipods can be
// found with a graph search. The tricky part is to capture all of the movement
// rules correctly.
//
// Rather than having single-step moves with more complicated state, we can have
// multi-step moves with more simple state. Each state can contain only the
// positions of all of the Amphipods and the cost for achieving that
// configuration.
//
// From each state, we can consider moving any Amphipod from the hallway into
// their target room, or from their source room into the hallway. Note that we
// do not need to consider moves directly from one room to another, as the
// arrangement of the hallway will allow for this to be handled implicitly by
// a move from the room into the hallway followed by another move from the
// hallway into a room. This approach encodes all of the movement restrictions
// of the Amphipods with minimal effort, but requires us to check reachability
// for each potential next state.
//
// The graph search is an A* over increasing costs until the target state is
// found. The heuristic estimates the cost of rearranging the Amphipods if they
// can pass through each other. The same approach is used for both part 1 and
// part 2.

import "std/std.aoc" as std;

struct Vector {
  x: byte;
  y: byte;
}

var input: [16]Vector;

struct Node {
  // cells[i] is the current position for Amphipod i.
  cells: [16]Vector;
  // The cost of reaching this configuration.
  cost: int64;
  // The heuristic guess of the cost for organising the Amphipods.
  guess: int64;
  // The next node with the same hash key, used only for the hash set.
  next: *any;  // *Node
}

// All nodes that have been explored.
alias maxNodes = 1048576;
var nodes: [maxNodes]Node;
var numNodes: int64;

// The heap stores the graph search frontier, ordered by heuristic guess.
alias maxHeapSize = 65536;
var heap: [maxNodes]*Node;
var heapSize: int64;

// A hashtable, keyed by amphipod positions, representing the visited states.
alias setBuckets = 262144;
var set: [setBuckets]*Node;

// The number of amphipods that we are currently trying to solve for.
var numAmphipods: int64;

// Returns true if the given input string matches the expected template.
function validate(value: []byte): bool {
  var template: []byte = 
      "#############\n#...........#\n###?#?#?#?###\n  #?#?#?#?#\n  #########\n";
  for var i = 0; template[i] != '\0'; i = i + 1 {
    var t = template[i];
    var c = value[i];
    if t == '?' {
      if c != 'A' && c != 'B' && c != 'C' && c != 'D' { return false; }
    } else {
      if t != c { return false; }
    }
  }
  return true;
}

// Read the puzzle input from stdin.
function readInput(): void {
  alias bufferSize = 128;
  var buffer: [bufferSize]byte;
  var length = std.read(std.stdin, &buffer, bufferSize);
  if length == 0 { std.die("empty"); }
  if buffer[length - 1] != '\n' { std.die("newline"); }
  if !validate(&buffer) { std.die("invalid input"); }
  var counts: [4]int64;
  for var i = 0; i < 4; i = i + 1 { counts[i] = 0; }
  for var x = 3; x < 11; x = x + 2 {
    for var y = 2; y < 4; y = y + 1 {
      var type = buffer[14 * y + x] - 'A';
      var count = &counts[type];
      if *count == 2 { std.die("too many of one type"); }
      var position = &input[4 * *count + type];
      position->x = x as byte;
      position->y = y as byte;
      *count = *count + 1;
    }
  }
}

// Allocate a node.
function newNode(): *Node {
  if numNodes == maxNodes { std.die("too many nodes"); }
  var node = &nodes[numNodes];
  numNodes = numNodes + 1;
  return node;
}

// Create a new node by copying an existing node and updating it.
function updateNode(
    node: *Node, i: int64, x: int64, y: int64, costDelta: int64): *Node {
  var n = newNode();
  *n = *node;
  n->cells[i].x = x as byte;
  n->cells[i].y = y as byte;
  n->cost = n->cost + costDelta;
  return n;
}

// Reset the heap and the visited set.
function reset(n: int64): void {
  heapSize = 0;
  numNodes = 0;
  for var i = 0; i < setBuckets; i = i + 1 { set[i] = null; }
  numAmphipods = n;
}

// Compute the hash for a given state.
function hash(node: *Node): int64 {
  var c: []Vector = &node->cells;
  var id = 123456789;
  for var i = 0; i < numAmphipods; i = i + 1 {
    id = (id * 131) ^ (c[i].x << 4 | c[i].y);
  }
  return id % setBuckets;
}

// Returns true if two states are the same.
function equal(a: []Vector, b: []Vector): bool {
  for var i = 0; i < numAmphipods; i = i + 1 {
    if a[i].x != b[i].x || a[i].y != b[i].y { return false; }
  }
  return true;
}

// Add a state to the visited set, preventing it from being visited again.
function add(node: *Node): bool {
  var key = hash(node);
  for var i = set[key]; i != null; i = i->next as *Node {
    if equal(&node->cells, &i->cells) { return false; }
  }
  node->next = set[key];
  set[key] = node;
  return true;
}

// Add a state to the frontier, so that it can be considered.
function push(node: *Node): void {
  // Apply the heuristic.
  node->guess = node->cost;
  for var j = 0; j < numAmphipods; j = j + 1 {
    var p = node->cells[j];
    var tx = targetX(j);
    if p.x != tx {
      var dx = tx < p.x ? p.x - tx : tx - p.x;
      var dy = p.y;  // (p.y - 1) to get out, 1 to get in.
      node->guess = node->guess + unitCost[j % 4] * (dx + dy);
    }
  }
  if heapSize == maxHeapSize { std.die("heap too large"); }
  var i = heapSize;
  heapSize = heapSize + 1;
  while i > 0 {
    var p = (i - 1) / 2;
    if heap[p]->guess <= node->guess { break; }
    heap[i] = heap[p];
    i = p;
  }
  heap[i] = node;
}

// Remove the frontier node with the lowest guess for its total cost.
function pop(): *Node {
  if heapSize == 0 { std.die("empty"); }
  heapSize = heapSize - 1;
  var node = heap[0];
  var last = heap[heapSize];
  var i = 0;
  while true {
    var l = 2 * i + 1;
    if l >= heapSize { break; }
    var c = l + 1 < heapSize && heap[l + 1]->guess < heap[l]->guess ? l + 1 : l;
    if heap[c]->guess >= last->guess { break; }
    heap[i] = heap[c];
    i = c;
  }
  heap[i] = last;
  return node;
}

// Returns true if the given state has all the Amphipods organised into the
// right rooms.
function isOrganized(state: []Vector): bool {
  for var i = 0; i < numAmphipods; i = i + 1 {
    if state[i].x != targetX(i) { return false; }
  }
  return true;
}

// Returns the X coordinate of the target room for Amphipod i.
function targetX(i: int64): int64 { return 3 + 2 * (i % 4); }

// Renders the given state onto a two-dimensional grid. Each cell stores the
// type of Amphipod in that position.
function toMap(node: *Node): [7][14]byte {
  var map: [7][14]byte;
  for var y = 0; y < 7; y = y + 1 {
    for var x = 0; x < 14; x = x + 1 {
      map[y][x] = 0 as byte;
    }
  }
  for var i = 0; i < numAmphipods; i = i + 1 {
    var p = node->cells[i];
    map[p.y][p.x] = (1 + i % 4) as byte;
  }
  return map;
}

// Returns true if an Amphipod at the start position would be obstructed from
// moving to the end position within the corridor.
function isCorridorBlocked(map: [][14]byte, start: int64, end: int64): bool {
  var step = start < end ? -1 : 1;
  for var x = end; x != start; x = x + step {
    if map[1][x] != 0 { return true; }
  }
  return false;
}

// Returns true if an Amphipod at position v would be obstructed from leaving
// their current room to enter the hallway.
function isStuckInRoom(map: [][14]byte, v: Vector): bool {
  for var y = v.y - 1; y > 1; y = y - 1 {
    if map[y][v.x] != 0 { return true; }
  }
  return false;
}

// Returns true if the room for Amphipod i contains any Amphipod that does not
// belong in that room.
function roomIncorrectlyPopulated(map: [][14]byte, i: int64): bool {
  var type = 1 + i % 4;
  var x = targetX(i);
  var yMax = 1 + numAmphipods / 4;
  for var y = 2; y <= yMax; y = y + 1 {
    var v = map[y][x];
    if v != 0 && v != type { return true; }
  }
  return false;
}

// With A=0, B=1, C=2, D=3, unitCost[i] is the cost of a unit of movement for
// the corresponding type of Amphipod. This is initialized by initData.
var unitCost: [4]int16;

// validStop[x] is true if it is valid to stop at position x in the hallway.
// This is initialized by initData.
var validStop: [16]bool;

// Initialize unitCost and validStop.
function initData(): void {
  for var i = 0; i < 14; i = i + 1 { validStop[i] = true; }
  validStop[0] = false;
  validStop[3] = false;
  validStop[5] = false;
  validStop[7] = false;
  validStop[9] = false;
  validStop[12] = false;
  var value = 1;
  for var i = 0; i < 4; i = i + 1 {
    unitCost[i] = value as int16;
    value = 10 * value;
  }
}

// Given a starting configuration that is compatible with numAmphipods, figure
// out the minimum cost to organise the Amphipods.
function solve(input: [16]Vector): int64 {
  var n = numAmphipods / 4;
  var root = newNode();
  root->cells = input;
  root->cost = 0;
  push(root);
  while true {
    if heapSize == 0 { std.die("impossible"); }
    var node = pop();
    if !add(node) { continue; }
    if isOrganized(&node->cells) { return node->cost; }
    var map = toMap(node);
    // Consider all ways that each Amphipod could move.
    for var i = 0; i < numAmphipods; i = i + 1 {
      var type = 1 + i % 4;
      var p = node->cells[i];
      if p.y == 1 {
        // The Amphipod is in the hall, so the only valid moves would be to move
        // into the target room. Skip if the room entrance is occupied.
        var tx = targetX(i);
        if isCorridorBlocked(&map, p.x, tx) ||
           roomIncorrectlyPopulated(&map, i) {
          continue;
        }
        // Scan the room for the furthest slot that isn't occupied.
        var ty = 1;
        while ty <= n && map[ty + 1][tx] == 0 { ty = ty + 1; }
        if ty == 1 { continue; }
        var dy = ty - 1;
        var dx = tx < p.x ? p.x - tx : tx - p.x;
        push(updateNode(node, i, tx, ty, unitCost[i % 4] * (dx + dy)));
      } else {
        // The Amphipod is in a room. Without loss of generality, we can
        // consider only moves that go into the hall: moves between rooms can be
        // considered as moves to the hall followed by moves from the hall. The
        // Amphipod should only move if they are in the wrong room, or if they
        // are obstructing the path of an Amphipod that is in the wrong room.
        if p.x == targetX(i) && !roomIncorrectlyPopulated(&map, i) { continue; }
        if isStuckInRoom(&map, p) { continue; }
        for var x = p.x - 1; x >= 1; x = x - 1 {
          if map[1][x] != 0 { break; }  // Obstructed.
          if validStop[x] {
            push(updateNode(
                node, i, x, 1, unitCost[i % 4] * (p.y - 1 + p.x - x)));
          }
        }
        for var x = p.x + 1; x <= 11; x = x + 1 {
          if map[1][x] != 0 { break; }  // Obstructed.
          if validStop[x] {
            push(updateNode(
                node, i, x, 1, unitCost[i % 4] * (p.y - 1 + x - p.x)));
          }
        }
      }
    }
  }
}

function part1(): int64 {
  reset(8);
  return solve(input);
}

function part2(): int64 {
  var copy = input;
  for var i = 0; i < 8; i = i + 1 {
    var v = &copy[i];
    if v->y == 3 { v->y = 5 as byte; }
  }
  // #############
  // #...........#
  // ###?#?#?#?###
  //   #D#C#B#A#    <- 11, 10,  9,  8
  //   #D#B#A#C#    <- 15, 13, 12, 14
  //   #?#?#?#?#
  //   #########
  copy[8].x  = 9 as byte; copy[8].y  = 3 as byte;
  copy[9].x  = 7 as byte; copy[9].y  = 3 as byte;
  copy[10].x = 5 as byte; copy[10].y = 3 as byte;
  copy[11].x = 3 as byte; copy[11].y = 3 as byte;
  copy[12].x = 7 as byte; copy[12].y = 4 as byte;
  copy[13].x = 5 as byte; copy[13].y = 4 as byte;
  copy[14].x = 9 as byte; copy[14].y = 4 as byte;
  copy[15].x = 3 as byte; copy[15].y = 4 as byte;
  reset(16);
  return solve(copy);
}

function main(): int64 {
  initData();
  readInput();
  std.printInt(part1());
  std.printInt(part2());
}
