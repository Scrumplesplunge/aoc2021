import "std/std.aoc" as std;

alias maxNumbers = 1000;
var numNumbers: int64;
var numbers: [maxNumbers]int16;
var minValue: int16;
var maxValue: int16;

function readInput(): void {
  alias bufferSize = 4096;
  var buffer: [bufferSize]byte;
  var length = read(std.stdin, &buffer as *void, bufferSize);
  if length == 0 { std.die("empty input"); }
  if buffer[length - 1] != '\n' { std.die("no final newline"); }
  var i: []byte = &buffer;
  var end = i + length;
  // Read the list of numbers.
  minValue = 32767 as int16;
  maxValue = 0 as int16;
  while i != end {
    if numNumbers == maxNumbers { std.die("too many numbers"); }
    var x: int16;
    i = std.readInt16(i, &x);
    if x < minValue { minValue = x; }
    if x > maxValue { maxValue = x; }
    numbers[numNumbers] = x;
    numNumbers = numNumbers + 1;
    if i[0] != ',' { break; }
    i = i + 1;
  }
  if i[0] != '\n' || i + 1 != end { std.die("trailing characters"); }
}

function part1(): int64 {
  var minFuel = 1 << 62;
  // Iterate over all candidates for x and compute the amount of fuel needed.
  for var x: int64 = minValue; x <= maxValue; x = x + 1 {
    var totalFuel = 0;
    for var i = 0; i < numNumbers; i = i + 1 {
      var delta = numbers[i] - x;
      var fuel = delta < 0 ? -delta : delta;
      totalFuel = totalFuel + fuel;
    }
    if totalFuel < minFuel {
      minFuel = totalFuel;
    }
  }
  return minFuel;
}

function part2(): int64 {
  var minFuel = 1 << 62;
  // Iterate over all candidates for x and compute the amount of fuel needed.
  for var x: int64 = minValue; x <= maxValue; x = x + 1 {
    var totalFuel = 0;
    for var i = 0; i < numNumbers; i = i + 1 {
      var delta = numbers[i] - x;
      var distance = delta < 0 ? -delta : delta;
      var fuel = distance * (distance + 1) / 2;  // Sum of 0..distance.
      totalFuel = totalFuel + fuel;
    }
    if totalFuel < minFuel {
      minFuel = totalFuel;
    }
  }
  return minFuel;
}

function main(): void {
  readInput();
  std.printInt(part1());
  std.printInt(part2());
}
