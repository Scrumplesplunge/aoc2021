// Input: A 10x10 grid of digits, representing the energy levels for 100 dumbo
// octopuses. In each step, every energy level increases by 1. If an octopus
// reaches an energy level of 10 or more, it will flash. Any octopus adjacent to
// a flashing octopus (8 neighbours) will gain 1 additional energy, which may
// trigger that octopus to also flash. At the end of each step, any octopus that
// flashed will reset to 0 energy.
//
// Part 1: Calculate how many flashes will have occurred after 100 steps.
//
// Part 2: Calculate the first step in which all 100 octopuses flash.
//
// Approach: The main tricky thing in this question is to ensure that energy
// levels are appropriately reset after a flash: the reset should occur after
// all flashes, not before, so every octopus that flashes should end up on 0 at
// the end of the step. To do this, we can defer the reset until the end: we
// count a flash only when the energy level hits *exactly* 10, not above, and we
// keep a list of every octopus which has flashed this round. Initially, this
// list can be seeded with all the octopuses that flash due to hitting 10
// naturally, and then the chain reactions can be handled by iterating over the
// list of flashes to update their neighbours and potentially add additional
// flashes to the list. After all flashes have been considered, a second pass
// over the list of flashes can be used to reset the energy levels to 0.
//
// For part 2, we simply iterate repeatedly until the list contains 100 flashes
// at the end of the step.

import "std/std.aoc" as std;

var input: [10][10]byte;

function readInput(): void {
  alias bufferSize = 128;
  var buffer: [bufferSize]byte;
  var length = std.read(std.stdin, &buffer, bufferSize);
  if length != 110 { std.die("wrong input size"); }
  var i: []byte = &buffer;
  for var y = 0; y < 10; y = y + 1 {
    for var x = 0; x < 10; x = x + 1 {
      var c = i[0];
      if c < '0' || '9' < c { std.die("syntax"); }
      input[y][x] = (c - '0') as byte;
      i = i + 1;
    }
    if i[0] != '\n' { std.die("syntax"); }
    i = i + 1;
  }
}

struct Point {
  x: byte;
  y: byte;
}

function step(energy: *[10][10]byte): int64 {
  // All energy levels increase. Any octopus that hits energy level 10 will
  // flash and its energy will reset to 0 at the end of the round.
  var flash: [100]Point;
  var numFlash = 0;
  for var y = 0; y < 10; y = y + 1 {
    for var x = 0; x < 10; x = x + 1 {
      var cell = &(*energy)[y][x];
      *cell = (*cell + 1) as byte;
      if *cell == 10 as byte {
        var out = &flash[numFlash];
        numFlash = numFlash + 1;
        out->x = x as byte;
        out->y = y as byte;
      }
    }
  }
  // Handle flashes (including chain reactions).
  for var i = 0; i < numFlash; i = i + 1 {
    var point = &flash[i];
    for var dy = -1; dy <= 1; dy = dy + 1 {
      var y = point->y + dy;
      if y < 0 || 10 <= y { continue; }  // Outside the grid.
      for var dx = -1; dx <= 1; dx = dx + 1 {
        var x = point->x + dx;
        if x < 0 || 10 <= x { continue; } // Outside the grid.
        var cell = &(*energy)[y][x];
        *cell = (*cell + 1) as byte;
        if *cell == 10 as byte {
          var out = &flash[numFlash];
          numFlash = numFlash + 1;
          out->x = x as byte;
          out->y = y as byte;
        }
      }
    }
  }
  // Reset the energy level of any octopus that flashed.
  for var i = 0; i < numFlash; i = i + 1 {
    var point = &flash[i];
    (*energy)[point->y][point->x] = 0 as byte;
  }
  return numFlash;
}

function part1(): int64 {
  var energy = input;
  var totalFlashes = 0;
  for var i = 0; i < 100; i = i + 1 {
    totalFlashes = totalFlashes + step(&energy);
  }
  return totalFlashes;
}

function part2(): int64 {
  var energy = input;
  var i = 1;
  while step(&energy) != 100 {
    i = i + 1;
  }
  return i;
}

function main(): int64 {
  readInput();
  std.printInt(part1());
  std.printInt(part2());
}
