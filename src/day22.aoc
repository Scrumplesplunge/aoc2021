import "std/std.aoc" as std;
import "std/strings.aoc" as strings;

struct Interval {
  min: int32;
  max: int32;
}
alias Box = [3]Interval;

struct Entry {
  box: Box;
  value: bool;
}

alias maxEntries = 420;
var entries: [maxEntries]Entry;
var numEntries: int64;

function readInput(): void {
  alias bufferSize = 32768;
  var buffer: [bufferSize]byte;
  var length = std.read(std.stdin, &buffer, bufferSize);
  if length == 0 { std.die("empty"); }
  if buffer[length - 1] != '\n' { std.die("newline"); }
  var i: []byte = &buffer;
  var end = i + length;
  while i != end {
    if numEntries == maxEntries { std.die("too many entries"); }
    var entry = &entries[numEntries];
    numEntries = numEntries + 1;
    if i[1] == 'n' {
      entry->value = true;
      if strings.strncmp(i, "on x=", 5) != 0 { std.die("syntax"); }
      i = i + 5;
    } else {
      entry->value = false;
      if strings.strncmp(i, "off x=", 6) != 0 { std.die("syntax"); }
      i = i + 6;
    }
    var box = &entry->box;
    i = std.readInt32(i, &(*box)[0].min);
    if strings.strncmp(i, "..", 2) != 0 { std.die("expected '..'"); }
    var temp: int32;
    i = std.readInt32(i + 2, &temp);
    (*box)[0].max = (temp + 1) as int32;
    if strings.strncmp(i, ",y=", 3) != 0 { std.die("syntax"); }
    i = std.readInt32(i + 3, &(*box)[1].min);
    if strings.strncmp(i, "..", 2) != 0 { std.die("expected '..'"); }
    i = std.readInt32(i + 2, &temp);
    (*box)[1].max = (temp + 1) as int32;
    if strings.strncmp(i, ",z=", 3) != 0 { std.die("syntax"); }
    i = std.readInt32(i + 3, &(*box)[2].min);
    if strings.strncmp(i, "..", 2) != 0 { std.die("expected '..'"); }
    i = std.readInt32(i + 2, &temp);
    (*box)[2].max = (temp + 1) as int32;
    if i[0] != '\n' { std.die("expected newline"); }
    i = i + 1;
  }
}

alias maxZones = 8192;
var zones: [maxZones]Box;
var numZones: int64;

var numRemoved: int64;
var numReadded: int64;
var numAdded: int64;

function addDifference(a: Box, b: *Box): void {
  for var axis = 0; axis < 3; axis = axis + 1 {
    var aRange = a[axis];
    var bRange = (*b)[axis];
    if aRange.max <= bRange.min || bRange.max <= aRange.min {
      std.die("bug: no overlap");
    }
    // Add any entry from the low side.
    if aRange.min < bRange.min {
      numReadded = numReadded + 1;
      var zone = &zones[numZones];
      if numZones == maxZones { std.die("too many zones"); }
      numZones = numZones + 1;
      *zone = a;
      (*zone)[axis].max = bRange.min;
      a[axis].min = bRange.min;
    }
    // Add any entry from the high side.
    if bRange.max < aRange.max {
      numReadded = numReadded + 1;
      var zone = &zones[numZones];
      if numZones == maxZones { std.die("too many zones"); }
      numZones = numZones + 1;
      *zone = a;
      (*zone)[axis].min = bRange.max;
      a[axis].max = bRange.max;
    }
  }
}

function subtract(a: *Box): void {
  for var i = numZones - 1; i >= 0; i = i - 1 {
    var b = &zones[i];
    if (*a)[0].max <= (*b)[0].min || (*b)[0].max <= (*a)[0].min ||
       (*a)[1].max <= (*b)[1].min || (*b)[1].max <= (*a)[1].min ||
       (*a)[2].max <= (*b)[2].min || (*b)[2].max <= (*a)[2].min {
      // The zone does not overlap with a.
      continue;
    }
    numRemoved = numRemoved + 1;
    // Remove the zone, split it up into parts that are not overlapping with a,
    // and re-add those.
    numZones = numZones - 1;
    var removed = *b;
    *b = zones[numZones];
    addDifference(removed, a);
  }
}

function add(a: *Box): void {
  numAdded = numAdded + 1;
  subtract(a);
  zones[numZones] = *a;
  if numZones == maxZones { std.die("too many zones"); }
  numZones = numZones + 1;
}

function inInitializationRegion(box: *Box): bool {
  return -50 <= (*box)[0].min && (*box)[0].max <= 51 &&
         -50 <= (*box)[1].min && (*box)[1].max <= 51 &&
         -50 <= (*box)[2].min && (*box)[2].max <= 51;
}

function countActive(): int64 {
  var total = 0;
  for var i = 0; i < numZones; i = i + 1 {
    var zone = &zones[i];
    var x = (*zone)[0].max - (*zone)[0].min;
    var y = (*zone)[1].max - (*zone)[1].min;
    var z = (*zone)[2].max - (*zone)[2].min;
    total = total + x * y * z;
  }
  return total;
}

function part1(): int64 {
  for var i = 0; i < numEntries; i = i + 1 {
    var entry = &entries[i];
    if !inInitializationRegion(&entry->box) { continue; }
    if entry->value {
      add(&entry->box);
    } else {
      subtract(&entry->box);
    }
  }
  return countActive();
}

function part2(): int64 {
  numZones = 0;
  for var i = 0; i < numEntries; i = i + 1 {
    var entry = &entries[i];
    if entry->value {
      add(&entry->box);
    } else {
      subtract(&entry->box);
    }
  }
  return countActive();
}

function main(): int64 {
  readInput();
  std.printInt(part1());
  std.printInt(part2());
}
