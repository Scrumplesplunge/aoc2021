// Input: A template string, followed by a blank line, followed by many
// production rules that describe what elements to insert between existing
// pairs based on what elements the pair is composed of. In each step, all pairs
// are simultaneously expanded by the production rules.
// Part 1: Apply 10 expansion steps, and then output the quantity of the most
// common element minus the quantity of the least common element.
// Part 2: Apply 40 expansion steps and output the result of the same
// calculation.
// Approach: We can avoid representing the entire polymer template, and can
// instead only keep track of how many instances of each pair there are. In each
// step, this is sufficient information to deduce what pairs will exist in the
// next iteration. We can calculate the number of occurrences of each element by
// summing up the number of occurrences of pairs containing that element. This
// will double-count every element (once as the first element of a pair, once as
// the second element) except for the first and last elements in the template
// string. Since these will never change over all the iterations, we can
// double-count those ones as well and then divide the total number of
// occurrences for each element by 2. It is then trivial to identify the most
// common and least common elements and to output the desired values.

import "std/std.aoc" as std;
import "std/strings.aoc" as strings;

alias maxSeedLength = 64;
var seed: [maxSeedLength]byte;
var seedLength: int64;
var recipes: [32][32]byte;  // Maps two uppercase characters to a third one.
var counts: [2][32][32]int64;
var step: int64;

function readInput(): void {
  alias bufferSize = 1024;
  var buffer: [bufferSize]byte;
  var length = std.read(std.stdin, &buffer, bufferSize);
  if length == 0 { std.die("empty"); }
  if buffer[length - 1] != '\n' { std.die("newline"); }
  var i: []byte = &buffer;
  var end = i + length;
  // Read the seed.
  while std.isUpper(i[0]) {
    if seedLength == maxSeedLength { std.die("seed too large"); }
    seed[seedLength] = (i[0] - 'A') as byte;
    seedLength = seedLength + 1;
    i = i + 1;
  }
  if i[0] != '\n' || i[1] != '\n' { std.die("expected empty line"); }
  i = i + 2;
  // Read the recipes.
  while i != end {
    var a = i[0];
    if !std.isUpper(a) { std.die("expected first letter"); }
    var b = i[1];
    if !std.isUpper(b) { std.die("expected second letter"); }
    if strings.strncmp(i + 2, " -> ", 4) != 0 { std.die("expected ' -> '"); }
    i = i + 6;
    var c = i[0];
    if !std.isUpper(c) { std.die("expected third letter"); }
    recipes[a - 'A'][b - 'A'] = (c - 'A') as byte;
    if i[1] != '\n' { std.die("expected newline"); }
    i = i + 2;
  }
  // Initialize the frequency counters.
  for var j = 1; j < seedLength; j = j + 1 {
    var cell = &counts[0][seed[j - 1]][seed[j]];
    *cell = *cell + 1;
  }
}

function countOccurrences(grid: [][32]int64): [26]int64 {
  // Every element will initially be double-counted except for the first and
  // last elements, due to the overlapping nature of the pairs. We explicitly
  // increase the count for the first and last elements and then divide every
  // count by two at the end.
  var occurrences: [26]int64;
  for var i = 0; i < 26; i = i + 1 {
    occurrences[i] = 0;
  }
  var first = &occurrences[seed[0]];
  *first = *first + 1;
  var last = &occurrences[seed[seedLength - 1]];
  *last = *last + 1;
  for var a = 0; a < 26; a = a + 1 {
    for var b = 0; b < 26; b = b + 1 {
      occurrences[a] = occurrences[a] + grid[a][b];
      occurrences[b] = occurrences[b] + grid[a][b];
    }
  }
  for var i = 0; i < 26; i = i + 1 {
    var cell = &occurrences[i];
    if *cell % 2 != 0 { std.die("odd count"); }
    *cell = *cell / 2;
  }
  return occurrences;
}

struct ElementStats {
  length: int64;
  leastCommon: byte;
  mostCommon: byte;
}

function elementStats(occurrences: []int64): ElementStats {
  var stats: ElementStats;
  var mostCommonCount = 0;
  var leastCommonCount = 1 << 60;
  for var i = 0; i < 26; i = i + 1 {
    var count = occurrences[i];
    if count == 0 { continue; }
    stats.length = stats.length + count;
    if count < leastCommonCount {
      leastCommonCount = count;
      stats.leastCommon = i as byte;
    }
    if count > mostCommonCount {
      mostCommonCount = count;
      stats.mostCommon = i as byte;
    }
  }
  return stats;
}

function advance(numSteps: int64): [26]int64 {
  var end = step + numSteps;
  while step != end {
    var input: [][32]int64 = &counts[step % 2];
    var output: [][32]int64 = &counts[(step + 1) % 2];
    for var a = 0; a < 26; a = a + 1 {
      for var b = 0; b < 26; b = b + 1 {
        output[a][b] = 0;
      }
    }
    for var a = 0; a < 26; a = a + 1 {
      for var b = 0; b < 26; b = b + 1 {
        var count = input[a][b];
        var c = recipes[a][b];
        var left = &output[a][c];
        *left = *left + count;
        var right = &output[c][b];
        *right = *right + count;
      }
    }
    step = step + 1;
  }
  return countOccurrences(&counts[numSteps % 2]);
}

function part1(): int64 {
  var occurrences = advance(10);
  var stats = elementStats(&occurrences);
  return occurrences[stats.mostCommon] - occurrences[stats.leastCommon];
}

function part2(): int64 {
  var occurrences = advance(30);
  var stats = elementStats(&occurrences);
  return occurrences[stats.mostCommon] - occurrences[stats.leastCommon];
}

function main(): int64 {
  readInput();
  std.printInt(part1());
  std.printInt(part2());
}
