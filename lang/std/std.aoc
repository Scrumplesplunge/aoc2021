export alias stdin = 0;
export alias stdout = 1;
export alias stderr = 2;

// function read(fd: int64, data: *any, size: int64): int64
export alias read = _builtin_read;

// function write(fd: int64, data: *any, size: int64): int64
export alias write = _builtin_write;

// function exit(code: int64): void
export alias exit = _builtin_exit;

// function copy(dest: *any, source: *any, size: int64): void
export alias copy = _builtin_copy;

export function strlen(message: []byte): int64 {
  var i = 0;
  while message[i] != '\0' {
    i = i + 1;
  }
  return i;
}

export function puts(message: []byte): void {
  write(stdout, message, strlen(message));
  write(stdout, "\n", 1);
}

export function die(message: []byte): void {
  write(stderr, message, strlen(message));
  write(stderr, "\n", 1);
  exit(1);
}

export function isDigit(x: byte): bool {
  return '0' <= x && x <= '9';
}

export function isLower(x: byte): bool {
  return 'a' <= x && x <= 'z';
}

export function isUpper(x: byte): bool {
  return 'A' <= x && x <= 'Z';
}

export function isAlpha(x: byte): bool {
  return isLower(x) || isUpper(x);
}

export function readInt(input: []byte, value: *int64): []byte {
  if !isDigit(input[0]) { die("bad"); }
  var temp = 0;
  while isDigit(input[0]) {
    temp = 10 * temp + (input[0] - '0');
    input = input + 1;
  }
  *value = temp;
  return input;
}

export function readInt8(input: []byte, value: *byte): []byte {
  var temp: int64;
  input = readInt(input, &temp);
  *value = temp as byte;
  return input;
}

export function readInt16(input: []byte, value: *int16): []byte {
  var temp: int64;
  input = readInt(input, &temp);
  *value = temp as int16;
  return input;
}

export function readInt32(input: []byte, value: *int32): []byte {
  var temp: int64;
  input = readInt(input, &temp);
  *value = temp as int32;
  return input;
}

export function printInt(x: int64): void {
  var negative = x < 0;
  if negative { x = -x; }
  var buffer: [24]byte;
  buffer[23] = '\n';
  var i = 23;
  while true {
    i = i - 1;
    buffer[i] = ('0' + (x % 10)) as byte;
    x = x / 10;
    if x == 0 { break; }
  }
  if negative {
    i = i - 1;
    buffer[i] = '-';
  }
  write(stdout, &buffer + i, 24 - i);
}
