function strlen(message: []byte): int64 {
  var i: int64;
  while message[i] {
    i = i + 1;
  }
  return i;
}

function die(message: []byte): void {
  write(2, message as *void, strlen(message));
  write(2, "\n" as *void, 1);
  exit(1);
}

function isDigit(x: byte): int64 {
  return '0' <= x && x <= '9';
}

function readInt(input: []byte, value: *int64): []byte {
  if !isDigit(input[0]) { die("bad"); }
  var temp: int64;
  temp = 0;
  while isDigit(input[0]) {
    temp = 10 * temp + (input[0] - '0');
    input = input + 1;
  }
  *value = temp;
  return input;
}

function printInt(x: int64): void {
  var buffer: [16]byte;
  buffer[15] = '\n';
  var i: int64;
  i = 15;
  while 1 {
    i = i - 1;
    buffer[i] = ('0' + (x % 10)) as byte;
    x = x / 10;
    if x == 0 { break; }
  }
  write(1, (&buffer + i) as *void, 16 - i);
}

var buffer: [1024]byte;
var numbers: [200]int64;
var numNumbers: int64;
var set: [2021]byte;

function readInput(): void {
  var length: int64;
  length = read(0, &buffer as *void, 1024);
  if length <= 0 { die("bad"); }
  if buffer[length - 1] != '\n' { die ("bad"); }
  var i: []byte;
  i = &buffer;
  var end: []byte;
  end = i + length;
  numNumbers = 0;
  while i != end {
    if numNumbers == 200 { die("too many"); }
    i = readInt(i, &numbers[numNumbers]);
    if numbers[numNumbers] > 2020 { die("too large"); }
    set[numbers[numNumbers]] = 1 as byte;
    numNumbers = numNumbers + 1;
    if i[0] != '\n' { die("bad"); }
    i = i + 1;
  }
}

function part1(): int64 {
  var i: int64;
  i = 0;
  while i < numNumbers {
    if set[2020 - numbers[i]] {
      return numbers[i] * (2020 - numbers[i]);
    }
    i = i + 1;
  }
  die("not found");
}

function part2(): int64 {
  var i: int64;
  i = 0;
  while i < numNumbers {
    var remaining: int64;
    remaining = 2020 - numbers[i];
    var j: int64;
    j = i + 1;
    while j < numNumbers {
      if numbers[j] > remaining { continue; }
      var numK: int64;
      numK = remaining - numbers[j];
      if set[numK] {
        return numbers[i] * numbers[j] * numK;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  die("not found");
}

function main(): int64 {
  readInput();
  printInt(part1());
  printInt(part2());
}
